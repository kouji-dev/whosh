// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  socialAccounts SocialAccount[]
  posts         Post[]
  teams         TeamMember[]
}

model SocialAccount {
  id            String    @id @default(cuid())
  platform      String    // twitter, facebook, instagram, linkedin
  accessToken   String
  refreshToken  String?
  tokenExpires  DateTime?
  platformUserId String
  username      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts         Post[]
}

model Post {
  id            String    @id @default(cuid())
  content       String
  mediaUrls     String[]  // Array of media URLs
  status        String    // draft, scheduled, published, failed
  scheduledFor  DateTime?
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccountId String
  socialAccount SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
  analytics     PostAnalytics?
}

model PostAnalytics {
  id            String    @id @default(cuid())
  postId        String    @unique
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes         Int       @default(0)
  shares        Int       @default(0)
  comments      Int       @default(0)
  clicks        Int       @default(0)
  impressions   Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Team {
  id            String    @id @default(cuid())
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  members       TeamMember[]
}

model TeamMember {
  id            String    @id @default(cuid())
  role          String    // admin, member
  teamId        String
  team          Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([teamId, userId])
} 